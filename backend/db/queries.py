# Code generated by sqlc. DO NOT EDIT.
# versions:
#   sqlc v1.29.0
#   sqlc-gen-better-python v0.4.4
"""Module containing queries from file queries.sql."""

from __future__ import annotations

__all__: collections.abc.Sequence[str] = ("Queries",)

from shared.internal import Snowflake
import typing

if typing.TYPE_CHECKING:
    import aiosqlite
    import collections.abc

from backend.db import models


CREATE_USER: typing.Final[str] = """-- name: CreateUser :execrows
INSERT INTO users(id, username, password, money)
VALUES (?,?,?,?)
"""

GET_USER_BY_ID: typing.Final[str] = """-- name: GetUserById :one
SELECT id, username, password, money
FROM users
WHERE users.id = ?
"""

GET_USER_BY_USERNAME: typing.Final[str] = """-- name: GetUserByUsername :one
SELECT id, username, password, money
FROM users
WHERE users.username = ?
"""


class Queries:
    """Queries from file queries.sql."""

    __slots__ = ("_conn",)

    def __init__(self, conn: aiosqlite.Connection) -> None:
        """Initialize the instance using the connection.

        Args:
            conn:
                Connection object of type `aiosqlite.Connection` used to execute the query.
        """
        self._conn = conn

    @property
    def conn(self) -> aiosqlite.Connection:
        """Connection object used to make queries.

        Returns:
            Connection object of type `aiosqlite.Connection` used to make queries.
        """
        return self._conn

    async def create_user(self, *, id_: Snowflake, username: str, password: str, money: int) -> int:
        """Execute SQL query with `name: CreateUser :execrows` and return the number of affected rows.

        ```sql
        INSERT INTO users(id, username, password, money)
        VALUES (?,?,?,?)
        ```

        Args:
            id_: Snowflake.
            username: str.
            password: str.
            money: int.

        Returns:
            The number (`int`) of affected rows. This will be -1 for queries like `CREATE TABLE`.
        """
        return (await self._conn.execute(CREATE_USER, (int(id_), username, password, money))).rowcount

    async def get_user_by_id(self, *, id_: Snowflake) -> models.User | None:
        """Fetch one from the db using the SQL query with `name: GetUserById :one`.

        ```sql
        SELECT id, username, password, money
        FROM users
        WHERE users.id = ?
        ```

        Args:
            id_: Snowflake.

        Returns:
            Result of type `models.User` fetched from the db. Will be `None` if not found.
        """
        row = await (await self._conn.execute(GET_USER_BY_ID, (int(id_),))).fetchone()
        if row is None:
            return None
        return models.User(id=Snowflake(row[0]), username=row[1], password=row[2], money=row[3])

    async def get_user_by_username(self, *, username: str) -> models.User | None:
        """Fetch one from the db using the SQL query with `name: GetUserByUsername :one`.

        ```sql
        SELECT id, username, password, money
        FROM users
        WHERE users.username = ?
        ```

        Args:
            username: str.

        Returns:
            Result of type `models.User` fetched from the db. Will be `None` if not found.
        """
        row = await (await self._conn.execute(GET_USER_BY_USERNAME, (username,))).fetchone()
        if row is None:
            return None
        return models.User(id=Snowflake(row[0]), username=row[1], password=row[2], money=row[3])
